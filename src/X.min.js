/*!
* Copyright 2015 linkFLy - http://www.cnblogs.com/silin6/
* Released under the MIT license
* http://opensource.org/licenses/mit-license.php
* Help document：https://github.com/linkFly6/linkfly.so/tree/master/LinkFLy/Code/X
* Date: 2014-8-24 20:17:18
*/
;(function (k, i) { var j = Array.prototype.push, w = Array.prototype.splice, o = Array.prototype.slice, p = Object.prototype.toString, g = Array.prototype.forEach, l = Array.prototype.filter, v = Array.prototype.map, f = {}, r = function (y) { return y == null ? p(y) : f[p.call(y)] || "object" }, b = function (y) { return r(y) === "function" }, h = function (A) { if (A == null) { return false } var z = A.length, y = r(A); if (A == A.window) { return true } if (A.nodeType === 1 && z) { return true } return y === "array" || y !== "function" && y !== "string" && (z === 0 || typeof z === "number" && z > 0 && (z - 1) in A) }, c = function (z) { var A = []; if (z) { var y = z.match(a); if (y && y[1]) { A[1] = function (B) { return x[y[1]] && x[y[1]].call(B, B, y) } } A[0] = z.replace(t, "") } return A }, t = /\[([^\]]*)\]/g, a = /\[(.+)(?:\(\))([=<>])([^\]]+)]/, u = function (y, D) { var G = D.replace("//", function () { while (y.parentNode) { y = y.parentNode } return "" }).split("/"), C, E = G.length, A = G[E - 1], F, z, B; if (A) { C = c(A); z = y.getElementsByTagName(C[0]); if (C[1]) { z = C[1](z) } B = z && o.call(z) } if (!z) { return [] } G.pop(); while (A = G.pop()) { C = c(A); F = C[1]; A = C[0]; if (A) { z = v.call(z, function (I, H) { if (!B[H]) { return null } C = B[H].parentNode; if (C.tagName == A) { B[H] = C; return I } else { return z[H] = null } }) } if (F) { z = F(z) } } return l.call(z, function (H) { return H != null }) }, x = { position: function (z, B) { if (!z) { return [] } var C = B[2].replace(/'/g, ""), y = +B[3], A = new Function("index", "max", "return index" + (C === "=" ? "==" : C) + "max"); return l.call(z, function (E, D) { return A(D, y) }) } }, m = new DOMParser(), e = function () { try { return new XPathEvaluator() } catch (y) { return false } }(), q = function (z) { var y = z && z.nodeType; return y && y === 1 || y === 9 }, n = function (D, A) { var y = [], z = r(D) === "string", B; if (!z) { return y } if (h(A)) { g.call(A, function (E) { y = y.concat(n(D, E)) }); return y } if (!q(A)) { return y } if (e) { try { result = e.evaluate(D, A, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null); while (B = result.iterateNext()) { y.push(B) } } catch (C) { } } else { y = u(A, D) } return y }, s = function (z, y) { if (h(y)) { g.call(y, function (A) { s(z, A) }) } else { if (q(y)) { j.call(z, y) } } }; "Boolean Number String Function Array Date RegExp Object".split(" ").forEach(function (y) { f["[object " + y + "]"] = y.toLowerCase() }); var d = function (y, B) { if (!(this instanceof d)) { return new d(y, B) } if (!y) { return } var z = []; if (r(y) === "string") { try { z.push(m.parseFromString(y, "text/xml")) } catch (A) { } } else { if (q(y)) { z.push(y) } else { if (h(y)) { z = y } } } if (r(B) === "string") { s(this, n(B, z)) } else { if (y instanceof d) { return y } else { s(this, z) } } }; d.prototype = { version: "linkFly.X.1.2", constructor: d, length: 0, find: function (z, y) { return d(y || this, z) }, text: function (y) { if (!arguments.length && y == i) { var z = this[0]; return (z && z.firstChild && z.firstChild.nodeValue) || "" } if (this.length) { g.call(this, function (A) { A.firstChild.nodeValue = y }) } return this }, attr: function (y, z) { if (arguments.length === 2) { z = z == i ? "" : z; if (this.length) { g.call(this, function (B) { B.setAttribute(y, z) }) } return this } var A = this[0]; return A && A.getAttribute && A.getAttribute(y) || "" }, each: function (A) { if (!b(A)) { return } for (var z = 0, y = this.length; z < y; z++) { if (A.call(this[z], this[z], z) === false) { return false } } return this } };[["eq", function (y) { return d(this[y[0]]) }], ["slice", function (y) { return d(o.call(this, y[0] || 0, y[1] || this.length - 1)) }], ["splice", function (z) { var y = [z[0] || 0, z[1] || 0].concat(o.call(z, 2)); return d(w.apply(this, y)) }]].forEach(function (y) { d.prototype[y[0]] = function () { if (!this.length) { return null } return y[1].call(this, arguments) } }); d.isXML = function (y) { return y && y.createElement && y.createElement("P").nodeName !== y.createElement("p").nodeName }; d.find = n; k.so = { X: d } })(window);